=========================================
Notes sur l'implémentation Qt
=========================================

-----------------------------------------
1) Processus d'update des mappings locaux
-----------------------------------------
updater principal : VQtLocalMappingUpdater
SVQtUpdaterShared : fournit la map entre les objets IObject et les objets VObjectView 
					+ propriétaire et créateur des objets Qt
					+ initialisation de la Q application
et appelle 'updateLocalMapping' de chaque objet soit:

	VGraphView -> IGraphicSignal
	VGuidoItemView -> IGuidoCode
	VImageView -> IImage
	VTextView -> IText
	VRectView -> IRect			( voir VMappedShapeView::updateGraphic2GraphicMapping )
	VEllipseView -> IEllipse	( voir VMappedShapeView::updateGraphic2GraphicMapping )
	VLineView -> ILine			( voir VMappedShapeView::updateGraphic2GraphicMapping )
	VPolygonView -> IPolygon	( voir VMappedShapeView::updateGraphic2GraphicMapping )
	VCurveView -> ICurve		( voir VMappedShapeView::updateGraphic2GraphicMapping )
	VVideoView -> IVideo		( voir VMappedShapeView::updateGraphic2GraphicMapping sans héritage )

code partagé:
VIntPointObjectView::updateLocalMapping : calcul de segments graphiques pour text et image
VGraphicsItemView::setMapping : composition finale et rangement pour tous les objets de la scene
VGraphicsItemView::buildDefaultMapping : construit le mapping par défaut pour tous les objets

mets à jour la taille des objets : VQtLocalMappingUpdater::updateObjectSize
sauf pour les objets dont la taille est accessible par le msg 'width' ou 'height' 
(i.e. IRect, IEllipse, IGraph, IScene et IVideo)

Sur la hérarchie des objets de la vue:
file:///Users/fober/src/Interlude/branches/sync/doc/doxygen/html/a00138.html
VMappedShapeView sert à partager le calcul des mappings locaux pour les objets qui héritent.
-> pourrait être implémenté dans IShapeMap

ATTENTION ! cette phase fait également un set des données des objets VQ...

-----------------------------

voir: optimisation de la construction des mappings pour ne pas les construire à chaque fois
revoir void VTextView::updateQtTextTable()
voir: VMappedShapeView::updateGraphic2GraphicMapping : voir si la relation SGraphic2GraphicRelation est nécessaire (?)
GraphicSegment VTextView::getGraphicSegment : structurer le contrôle d'erreur
GraphicSegment VImageView::getGraphicSegment : structurer le contrôle d'erreur idem

-----------------------------------------
3) Processus d'update de la vue
-----------------------------------------
updater principal : VQtViewUpdater
SVQtUpdaterShared : fournit la map entre les objets IObject et les objets VObjectView
appelle 'updateSlaveView' pour les objets esclaves: glisse les objets Qt dans leur maître
ou les remets dans la scène (voir QGraphicsItem::setParentItem) : 
à voir : les indirections pour gérer les VObjectView et résoudre en VGraphicsItemView
appelle updateTo de chaque objet soit :
	VApplView -> IAppl
	VSceneView -> IScene
	VImageView -> IImage
	VRectView -> IRect
	VEllipseView -> IEllipse
	VPolygonView -> IPolygon
	VGuidoItemView -> IGuidoCode
	VTextView -> IText
	VTextView -> IHtml
	VGraphView -> IGraphicSignal
	VCurveView -> ICurve
	VLineView -> ILine
	VVideoView -> IVideo

VSceneView : voir OSC_SCENE_ADDRESS
			 voir WindowEventFilter pour en faire un vrai controler et modifier directement le modèle

à voir: gestion centralisée des conversions de coordonnées Qt <-> interlude dans VObjectView


-----------------------------------------
4) VGraphicsItemView : le noeud de la vue
-----------------------------------------
VGraphicsItemView::setStretch
basculement entre l'utilisation directe de l'objet de la vue (fItem) et le tiler (fTilerItem)
question : que deviennent les enfants ?
revoir l'indirection item()
revoir 	item()->setFlag( QGraphicsItem::ItemStacksBehindParent , (o->getZOrder() < 0) ); pour Qt4.6 (QGraphicsItem::ItemNegativeZStacksBehindParent	)
pas clair: referenceRect(bool) clarifier quelle est la taille etc... en fonction des modes de synchronisation
voir également la sémantique de la largeur et hauteur des objets du modèle en mode stretch, qui les met à jour ? quand ?


QStretchTilerItem
logique : gère un item en cache qui est ensuite découpé et recopié dans la méthode paint
vérifier les problèmes d'échelle en Qt4.6 (voir painter->scale( 1/PRECISION , 1/PRECISION );)
le bug se constate avec du stretch sur les voices de guido (petit décalage) et peu également se constater 
rien qu'en affichant le mapping voice1 (par exemple) ???
QTilerItem et QTextTilerItem sont obsolètes


-----------------------------------------
  TODO list
-----------------------------------------

- gérer un seul modèle de couleur en interne
- interactions : au niveau des objets de la scène, on peut implémenter QGraphicsItem::sceneEvent
ou encore les méthodes spécialisées (mousePressEvent(),etc...)


-----------------------------------------
Divers
-----------------------------------------

note sur l'encodage  des caractères: se définit au niveau de l'application donc lié à l'application  et pas aux objets 
voir getGuidoFontPath (dans GuidoFont Loader.h) pour impl Qt de getGuidoFontPath

à noter: 
VShapeView utilise QAbstractGraphicsShapeItem : c'est un QGraphicsItem + un pinceau et une brush

VGuidoItemView.cpp :
- void AbstractMapCollector::Graph2TimeMap fait des contrôles qui sont maintenant faits dans TSegmentation

VGraphView :
dessin effectif fait par QGraphicsGraphItem

-----------------------------------------
Qt - à retenir
QWidget et 
QGraphicsItem : le premier c'est une fenêtre ou un bouton


-----------------------------------------
Special Windows
-----------------------------------------
- éviter la console sous windows: statique dans le .pro avec des directives du type CONFIG+=console
